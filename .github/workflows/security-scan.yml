name: Security Scanning

on:
  push:
  pull_request:

permissions:
  security-events: write
  contents: read
  actions: read

jobs:
  infrastructure-security:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform,ansible
          output_format: sarif
          output_file_path: reports/checkov-results.sarif
          download_external_modules: true
          quiet: false
          config_file: .checkov.yml

      - name: Upload Checkov results as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: checkov-results
          path: reports/checkov-results.sarif
          retention-days: 30

      - name: Upload Checkov results to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/checkov-results.sarif
          category: "Infrastructure Security"
        continue-on-error: true

  secrets-scanning:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for TruffleHog

      - name: Run TruffleHog OSS
        run: |
          docker run --rm -v "$PWD:/tmp" -w /tmp \
          ghcr.io/trufflesecurity/trufflehog:latest \
          git file:///tmp/ --json --only-verified > trufflehog-results.json || true
        continue-on-error: true

      - name: Upload TruffleHog results as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trufflehog-results
          path: trufflehog-results.json
          retention-days: 30

  dependency-scanning:
    name: Dependency Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          pip install ansible
          pip install safety

      - name: Check Python dependencies for vulnerabilities
        run: |
          pip freeze | safety scan --stdin --output json --output-file safety-results.json || true
          pip freeze | safety scan --stdin || true

      - name: Upload safety results as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: safety-results
          path: safety-results.json
          retention-days: 30

      - name: Check GitHub Actions for security issues
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_GITHUB_ACTIONS: true
          VALIDATE_YAML: true
          VALIDATE_JSON: true

  terraform-security:
    name: OpenTofu Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: '1.10.5'

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: infra/
          format: sarif
          output: ../tfsec-results.sarif

      - name: Upload tfsec results as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tfsec-results
          path: tfsec-results.sarif
          retention-days: 30

      - name: Upload tfsec results to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: tfsec-results.sarif
          category: "Terraform Security"
        continue-on-error: true

  ansible-security:
    name: Ansible Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Ansible and security tools
        run: |
          pip install ansible ansible-lint

      - name: Run ansible-lint security checks
        working-directory: ansible
        run: |
          ansible-lint --profile=production --format=json playbooks/ > ../ansible-lint-results.json || true
          ansible-lint --profile=production playbooks/ || true

      - name: Upload ansible-lint results as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ansible-lint-results
          path: ansible-lint-results.json
          retention-days: 30

  summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [infrastructure-security, secrets-scanning, dependency-scanning, terraform-security, ansible-security]
    if: always()

    steps:
      - name: Generate Security Summary
        run: |
          echo "# Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.infrastructure-security.result }}" == "success" ]; then
            echo "✅ Infrastructure Security (Checkov): PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Infrastructure Security (Checkov): FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.secrets-scanning.result }}" == "success" ]; then
            echo "✅ Secrets Scanning (TruffleHog): PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Secrets Scanning (TruffleHog): FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.dependency-scanning.result }}" == "success" ]; then
            echo "✅ Dependency Scanning: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Dependency Scanning: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.terraform-security.result }}" == "success" ]; then
            echo "✅ Terraform Security (tfsec): PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Terraform Security (tfsec): FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.ansible-security.result }}" == "success" ]; then
            echo "✅ Ansible Security: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Ansible Security: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "- Review security findings in the GitHub Security tab" >> $GITHUB_STEP_SUMMARY
          echo "- Address any high-severity vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "- Keep dependencies updated regularly" >> $GITHUB_STEP_SUMMARY